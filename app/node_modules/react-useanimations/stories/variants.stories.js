"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WrapperElement = exports.Size = exports.CustomCSS = exports.Stroke = exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _addonInfo = require("@storybook/addon-info");

var _activity = _interopRequireDefault(require("../lib/activity"));

var _youtube = _interopRequireDefault(require("../lib/youtube"));

var _heart = _interopRequireDefault(require("../lib/heart"));

var _ = _interopRequireDefault(require(".."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _default = {
  title: 'Variants',
  component: _["default"],
  decorators: [_addonInfo.withInfo]
};
exports["default"] = _default;

var Stroke = function Stroke() {
  return /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      display: 'flex',
      flexWrap: 'wrap'
    }
  }, /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      padding: '20px'
    }
  }, /*#__PURE__*/_react["default"].createElement("span", null, "activity"), /*#__PURE__*/_react["default"].createElement(_["default"], {
    strokeColor: "green",
    size: 40,
    wrapperStyle: {
      marginTop: '5px'
    },
    animation: _activity["default"]
  })), /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      padding: '20px'
    }
  }, /*#__PURE__*/_react["default"].createElement("span", null, "activity"), /*#__PURE__*/_react["default"].createElement(_["default"], {
    strokeColor: "red",
    size: 40,
    wrapperStyle: {
      marginTop: '5px'
    },
    animation: _youtube["default"]
  })));
};

exports.Stroke = Stroke;
Stroke.story = {
  parameters: {
    info: {
      text: "\n      ~~~js\n      export const Stroke = () => (\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          <div style={{ padding: '20px' }}>\n            <span>activity</span>\n            <UseAnimation\n              strokeColor=\"green\"\n              size={40}\n              wrapperStyle={{ marginTop: '5px' }}\n              animation={activity}\n            />\n          </div>\n          <div style={{ padding: '20px' }}>\n            <span>activity</span>\n            <UseAnimation\n              strokeColor=\"red\"\n              size={40}\n              wrapperStyle={{ marginTop: '5px' }}\n              animation={youtube}\n            />\n          </div>\n        </div>\n      );\n      ~~~\n    "
    }
  }
};

var CustomCSS = function CustomCSS() {
  return /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      display: 'flex',
      flexWrap: 'wrap'
    }
  }, /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      padding: '20px'
    }
  }, /*#__PURE__*/_react["default"].createElement("span", null, "activity"), /*#__PURE__*/_react["default"].createElement(_["default"], {
    size: 40,
    pathCss: "stroke: purple; stroke-width: 2%;",
    wrapperStyle: {
      marginTop: '5px'
    },
    animation: _activity["default"]
  })));
};

exports.CustomCSS = CustomCSS;
CustomCSS.story = {
  parameters: {
    info: {
      text: "\n      ~~~js\n      export const CustomCSS = () => (\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          <div style={{ padding: '20px' }}>\n            <span>activity</span>\n            <UseAnimation\n              size={40}\n              pathCss=\"stroke: purple; stroke-width: 2%;\"\n              wrapperStyle={{ marginTop: '5px' }}\n              animation={activity}\n            />\n          </div>\n        </div>\n      );\n      ~~~\n    "
    }
  }
};

var Size = function Size() {
  return /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      display: 'flex',
      flexWrap: 'wrap'
    }
  }, /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      padding: '20px'
    }
  }, /*#__PURE__*/_react["default"].createElement("span", null, "activity"), /*#__PURE__*/_react["default"].createElement(_["default"], {
    size: 60,
    wrapperStyle: {
      marginTop: '5px'
    },
    animation: _activity["default"]
  })));
};

exports.Size = Size;
Size.story = {
  parameters: {
    info: {
      text: "\n      ~~~js\n      export const Size = () => (\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          <div style={{ padding: '20px' }}>\n            <span>activity</span>\n            <UseAnimation size={60} wrapperStyle={{ marginTop: '5px' }} animation={activity} />\n          </div>\n        </div>\n      );\n      ~~~\n    "
    }
  }
};

var WrapperElement = function WrapperElement() {
  return /*#__PURE__*/_react["default"].createElement(_["default"], {
    animation: _heart["default"],
    size: 60,
    onClick: function onClick() {
      // eslint-disable-next-line
      console.log('additional onClick cb is working');
    },
    render: function render(eventProps, animationProps) {
      return /*#__PURE__*/_react["default"].createElement("button", _extends({
        style: {
          padding: '20px'
        },
        type: "button"
      }, eventProps), /*#__PURE__*/_react["default"].createElement("div", animationProps));
    }
  });
};

exports.WrapperElement = WrapperElement;
WrapperElement.story = {
  parameters: {
    info: {
      text: "\n      ~~~js\n      export const WrapperElement = () => {\n        return (\n          <UseAnimation\n            animation={heart}\n            size={60}\n            onClick={() => {\n              // eslint-disable-next-line\n              console.log('additional onClick cb is working');\n            }}\n            render={(eventProps, animationProps) => (\n              <button style={{ padding: '20px' }} type=\"button\" {...eventProps}>\n                <div {...animationProps} />\n              </button>\n            )}\n          />\n        );\n      };\n      ~~~\n    "
    }
  }
};